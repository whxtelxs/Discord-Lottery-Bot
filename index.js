const { Client, GatewayIntentBits, Partials, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs').promises;

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ],
    partials: [Partials.Channel]
});

const config = require('./config.json');
const CHANNEL_ID = config.channelId;
const LOTTERY_FILE = 'lottery.json';
const LOTTERY_SETTINGS = 'lottery_settings.json';

let participants = new Set();
let lotteryEnd = null;
let lotteryMessage = null;
let settings = {};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
// 
client.once('ready', async () => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    try {
        await loadSettings();
        if (settings.giveStatus === 'close') {
            console.log('–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.');
            return;
        }
        const messageId = await loadLotteryData();
        if (messageId) {
            const channel = client.channels.cache.get(CHANNEL_ID);
            if (channel) {
                const msg = await channel.messages.fetch(messageId);
                lotteryMessage = msg;
                continueLottery();
            }
        } else {
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏:', error);
    }
});

// –ü–æ–¥–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –ª–∏–±–æ —Å–æ–∑–¥–∞–Ω–∏–µ –µ–≥–æ
// 
async function loadSettings() {
    try {
        const data = await fs.readFile(LOTTERY_SETTINGS, 'utf8');
        settings = JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—Ç–µ—Ä–µ–∏:', error);
        settings = { prize: '1000 MC', winners: 5, duration: 86400000, giveStatus: 'close' }; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await saveSettings();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö 
// 
async function saveSettings() {
    await fs.writeFile(LOTTERY_SETTINGS, JSON.stringify(settings));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ 
// 
async function saveLotteryData() {
    const data = {
        endTime: lotteryEnd.toISOString(),
        participants: Array.from(participants),
        messageId: lotteryMessage?.id
    };
    await fs.writeFile(LOTTERY_FILE, JSON.stringify(data));
}

// –ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
// 
async function loadLotteryData() {
    try {
        const data = await fs.readFile(LOTTERY_FILE, 'utf8');
        const savedData = JSON.parse(data);
        participants = new Set(savedData.participants);
        lotteryEnd = new Date(savedData.endTime);
        return savedData.messageId;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–∏:', error);
        return null;
    }
}

// –ó–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
// 
function startLottery() {
    lotteryEnd = new Date(Date.now() + settings.duration);
    sendLotteryMessage();
    continueLottery();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à –∏–ª–∏ –Ω–µ—Ç
// 
function continueLottery() {
    const timeLeft = lotteryEnd.getTime() - Date.now();
    if (timeLeft > 0) {
        setTimeout(endLottery, timeLeft);
    } else {
        endLottery();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ
// 
function createLotteryEmbed(lastParticipant) {
    const endTimeStamp = Math.floor(lotteryEnd.getTime() / 1000);
    let description = `üèÜ –ü—Ä–∏–∑: **${settings.prize}**\nüë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: **${settings.winners}**\nüëã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **${participants.size}**\n‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <t:${endTimeStamp}:R>`;

    if (lastParticipant) {
        description += `\nüî∑ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: <@${lastParticipant}>`;
    }

    const embed = new EmbedBuilder()
        .setColor(0x0099ff)
        .setTitle('üéâ –†–æ–∑—ã–≥—Ä—ã—à!')
        .setDescription(description)
        .setFooter({ text: '–£—á–∞—Å—Ç–≤—É–π—Ç–µ —Å–µ–π—á–∞—Å!' });

    return embed;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º 
// 
async function sendLotteryMessage() {
    const channel = client.channels.cache.get(CHANNEL_ID);
    if (!channel) return;

    const button = new ButtonBuilder()
        .setCustomId('participate')
        .setLabel('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')
        .setStyle(ButtonStyle.Primary);

    const row = new ActionRowBuilder().addComponents(button);

    const embed = createLotteryEmbed();
    try {
        const msg = await channel.send({ content: '@everyone –ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è!', embeds: [embed], components: [row] });
        lotteryMessage = msg;
        saveLotteryData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
// 
async function deleteInteractionReply(interaction) {
    try {
        await interaction.deleteReply();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
// 
function updateLotteryMessage(lastParticipant) {
    if (!lotteryMessage) return;
    const embed = createLotteryEmbed(lastParticipant);
    lotteryMessage.edit({ embeds: [embed] })
        .catch(console.error);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
// 
function endLottery() {
    const winners = chooseWinners();
    const winnerMentions = winners.map(id => `<@${id}>`).join(', ');
    const embed = new EmbedBuilder()
        .setColor(0x00ff00)
        .setTitle('üéä –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!')
        .setDescription(`üèÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${winnerMentions}`);

    const channel = client.channels.cache.get(CHANNEL_ID);
    if (channel) {
        channel.send({ embeds: [embed] })
            .catch(console.error);
    }
    participants.clear();
    lotteryMessage = null;
    settings.giveStatus = 'close';
    saveSettings();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è / –≤—ã–±–æ—Ä–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
// 
function chooseWinners() {
    if (settings.status === 'fake' && settings.fakeWinner) {
        const winners = [settings.fakeWinner];
        while (winners.length < settings.winners && participants.size > 0) {
            let randomWinner;
            do {
                randomWinner = Array.from(participants)[Math.floor(Math.random() * participants.size)];
            } while (winners.includes(randomWinner));
            winners.push(randomWinner);
        }
        return winners;
    } else {
        const participantsArray = Array.from(participants);
        const winners = [];
        for (let i = 0; i < settings.winners && participantsArray.length; i++) {
            const randomIndex = Math.floor(Math.random() * participantsArray.length);
            winners.push(participantsArray.splice(randomIndex, 1)[0]);
        }
        return winners;
    }
}

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å
//
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'participate') {
        try {
            await interaction.deferReply({ ephemeral: true });

            const userId = interaction.user.id;

            if (participants.has(userId)) {
                await interaction.editReply({ content: '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!' });
            } else {
                participants.add(userId);
                saveLotteryData();
                updateLotteryMessage(userId);
                await interaction.editReply({ content: '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!' });
            }

            setTimeout(async () => {
                await deleteInteractionReply(interaction);
            }, 5000);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:', error);
        }
    }
});

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /endlottery
//
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand() || interaction.commandName !== 'endlottery') return;

    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
        await interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
        return;
    }

    if (settings.giveStatus === 'close') {
        await interaction.reply({ content: '–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.', ephemeral: true });
        return;
    }

    settings.giveStatus = 'close';
    await saveSettings();

    endLottery();
    await interaction.reply({ content: '–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!', ephemeral: true });
});

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /startlottery
// 
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand() || interaction.commandName !== 'startlottery') return;

    if (!interaction.member.permissions.has('ADMINISTRATOR')) {
        await interaction.reply({ content: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.', ephemeral: true });
        return;
    }

    if (settings.giveStatus === 'open') {
        await interaction.reply({ content: '–†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∑–∞–ø—É—â–µ–Ω!', ephemeral: true });
        return;
    }

    const prize = interaction.options.getString('prize');
    const winners = interaction.options.getInteger('winners');
    const duration = interaction.options.getInteger('duration') * 60000;
    const status = interaction.options.getString('status');
    const fakeWinner = status === 'fake' ? interaction.options.getString('winner') : null;

    settings = { ...settings, prize, winners, duration, status, fakeWinner, giveStatus: 'open' };
    await saveSettings();

    startLottery();
    await interaction.reply({ content: '–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞—Ç!', ephemeral: true });
    setTimeout(async () => {
        await deleteInteractionReply(interaction);
    }, 5000);
});

client.login(config.token);
